List all the shell scripts contents of the directory
FIle: arg.sh
arrays.sh
cmdlinevar.sh
currentdate.sh
file_exist.sh
forloop.sh
ifexpr.sh
ifthenelse.sh
simpleif.sh
sleep.sh
special.sh
test.sh
testfile.sh
types-variable.sh
wait.sh - Contents #!/bin/bash

for arg in "$@"
do
index=$(echo $arg | cut -f1 -d=)
val=$(echo $arg | cut -f2 -d=)
case $index in
X) x=$val;;
Y) y=$val;;
*)
esac
done
((result=x+y))
echo "X+Y=$result"
#!/bin/bash

#ARRAYS- works with indexs , starts with 0,1,2
#How to declare array?
MYARRAY=("First" "Second" "Third") #three variables in array

echo $MYARRAY #display the first array

#Right way to call all the array is by 

echo ${MYARRAY[1]}

#simple array list and loop for diplay

SERVERLIST=("websrv01" "websrv02" "websrv03" "websrv04")
COUNT=0

#@ for everything that exists in array

for INDEX in ${SERVERLIST[@]}; do
  echo "Processing Server: ${SERVERLIST[COUNT]}"
  COUNT="`expr $COUNT + 1 `"
done


#!/bin/bash
# demo of command line values passed in with our shell script

USERNAME=$1
PASSWORD=$2
echo "The following usernmae is $USERNAME and Password is $PASSWORD"
#!/bin/bash
Year=`date +%Y`
Month=`date +%m`
Day=`date +%D`
Hour=`date +%H`
Minute=`date +%M`
Second=`date +%S`
echo `date`
echo "Current Date is : $Day - $Month - $Year"
echo "Current Time is: $Hour:$Minute:$Second"
#!/bin/bash

file=$1

if [ -e $file ]; then
echo " File $file exists "
else
echo " File $file doesnot exist"
fi
#!/bin/bash
# this is a demo of a for loop

echo "List all the shell scripts contents of the directory"

SHELLSCRIPTS=`ls *.sh`

for SCRIPT in "$SHELLSCRIPTS"; do
  DISPLAY="`cat $SCRIPT`" 
  echo "FIle: $SCRIPT - Contents $DISPLAY"
done
#!/bin/bash

#test multiple expressions in single if statement

FILENAME=$1

echo "Testing for file $FILENAME and readibility"

if [ -f $FILENAME ] && [ -r $FILENAME ]
  then
    echo "File $FILENAME exists and is readable"
fi
#!/bin/bash
#simple example of if then else and nested if statements


clear

echo "Enter a number between 1 and 3: "
read VALUE

if [ "$VALUE" -eq "1" ] 2>/dev/null; then
  echo "You entered #1"
elif [ "$VALUE" -eq "3" ] 2>/dev/null; then
  echo "You successfully entered #3"
elif [ "$VALUE" -eq "2" ] 2>/dev/null; then
  echo "You entered #2"
else
  echo "You didn't follow the instructions"
fi
#!/bin/bash
#simple if script for guessing a number

echo "Guess the secret number"
echo "======================"
echo ""
echo "Enter a Number Between 1 and 5: "
read GUESS

if [ $GUESS -eq 3 ]
  then
    echo "You Guessed the Correct Number!"
fi


#!/bin/bash

echo "Wait for 5 seconds"
sleep 5
echo "Completed"
#!/bin/bash
echo "Printing text"
echo -n "Printing text without newline"
echo -e "\nRemoving \t special \t characters\n"
#!/bin/bash

echo "This is a full sentence"

echo " This is a different sentence " > /dev/null
#!/bin/bash
#tests of existence of indicated file name

FILENAME=$1
echo "Testing for the existence of a file called $FILENAME"

#a,e or f checks for the existence of the files

if [ ! -e $FILENAME ]
  then
    echo " File $FILENAME doesnot exist" 
fi  
#!/bin/bash

MYVAR=4

echo $MYVAR

echo `expr $MYVAR + 5` 
#expr stands for expression and ` is a special character used in echo

declare -p MYVAR
MYVAR1="Name"
echo $MYVAR1

echo "`expr $MYVAR1 +5 `"


#!/bin/bash
echo "Wait command" 
process_id=$!
wait $process_id
echo "Exited with status $?"
